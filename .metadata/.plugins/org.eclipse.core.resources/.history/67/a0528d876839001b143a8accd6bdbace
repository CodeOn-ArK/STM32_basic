/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdint.h>

int main(void)
{
	//Pointer declaration to RCC, GPIO_A pin mode GPIO_A o/p data reg && GPIO_A i/p data reg
	uint32_t *pRCC_AHB1ENR	 = (uint32_t*)0x40023830;
	uint32_t *GPIOA_MODER	 = (uint32_t*)0x40020000;
	uint32_t *GPIOC_MODER	 = (uint32_t*)0x40020800;
	uint32_t *GPIOA_ODR		 = (uint32_t*)0x40020014;
	uint32_t *GPIOC_IDR		 = (uint32_t*)0x40020810;
	uint32_t *GPIOC_PUPDR	 = (uint32_t*)0x4002080C;

	//Enabling RCC for GPIO_A by setting bit 1
	*pRCC_AHB1ENR |= 0x5;

	//clear GPIO_A mode of pin A5 and A6 (15 == 0b00001111)
	*GPIOA_MODER &= ~(15 << 10);

	//Set GPIO_A mode of pin A5 to 01 to set it to o/p and leave A6 to 00 to make i/p
	*GPIOA_MODER |= (1 << 10);
	*GPIOC_MODER &= ~(0x3 << 8);

	*GPIOC_PUPDR |= (1 << 8);

    /* Loop forever */
	for(;;)
	{
		if(!(*GPIOC_IDR & 0x10))				//If GPIO_A i/p data reg is set for pin A6 (checking IP6 for GPIO_A6)
		{
			*GPIOA_ODR |= (1 << 5);			//Light up led at A5 by setting up bit at OT5
		}
		else
			*GPIOA_ODR &= ~(1<<5);			//Else clear the bit at OT5 of ODR for pin A5
	}

}
