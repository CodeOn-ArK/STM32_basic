
011keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800110c  0800110c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001178  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001178  00020090  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000021db  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005d1  00000000  00000000  00022269  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000120  00000000  00000000  00022840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00022960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000029cc  00000000  00000000  00022a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001265  00000000  00000000  00025414  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009115  00000000  00000000  00026679  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002f78e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009f0  00000000  00000000  0002f80c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000064 	.word	0x20000064
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001054 	.word	0x08001054

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000068 	.word	0x20000068
 8000200:	08001054 	.word	0x08001054

08000204 <delay>:

#include<stdio.h>
#include<stdint.h>

void delay()
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(int i=0; i < 100000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <delay+0x24>)
 800021a:	4293      	cmp	r3, r2
 800021c:	ddf8      	ble.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0001869f 	.word	0x0001869f

0800022c <main>:

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
	//initialize the pointer variables with appropriate memory mapped
	//registers addresses
	//use type qualifier such as volatile or const if memory mapped register
	//access is involved
	//REGISTERS TO BE INITIALIZED : RCCAHB1ENR, GPIOAMODER, GPIOAIPR. GPIOAOPR, GPIOAPUDR*/
	uint32_t volatile *const pRCC_en 			= (uint32_t *)(0x40023800 + 0x30);
 8000232:	4b8a      	ldr	r3, [pc, #552]	; (800045c <main+0x230>)
 8000234:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pGPIO_mode 		= (uint32_t *)(0x40020400);
 8000236:	4b8a      	ldr	r3, [pc, #552]	; (8000460 <main+0x234>)
 8000238:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGPIO_OP 			= (uint32_t *)(0x40020400 + 0x14);
 800023a:	4b8a      	ldr	r3, [pc, #552]	; (8000464 <main+0x238>)
 800023c:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pGPIO_IP 			= (uint32_t *)(0x40020400 + 0x10);
 800023e:	4b8a      	ldr	r3, [pc, #552]	; (8000468 <main+0x23c>)
 8000240:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pGPIO_pullup 		= (uint32_t *)(0x40020400 + 0x0C);
 8000242:	4b8a      	ldr	r3, [pc, #552]	; (800046c <main+0x240>)
 8000244:	607b      	str	r3, [r7, #4]
	//IMPLEMENTATION: STEP 3
	//make all row IOs mode as O/P
	//make all column IOs mode as I/P
	//activate internal pull-up resistors for column IOs
*/
	*pRCC_en		 |= 0x2;
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0202 	orr.w	r2, r3, #2
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	601a      	str	r2, [r3, #0]

	*pGPIO_mode      &= ~(0xffff);
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	0c1b      	lsrs	r3, r3, #16
 8000258:	041b      	lsls	r3, r3, #16
 800025a:	693a      	ldr	r2, [r7, #16]
 800025c:	6013      	str	r3, [r2, #0]
	*pGPIO_mode 	 |= 0x55;
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0255 	orr.w	r2, r3, #85	; 0x55
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	601a      	str	r2, [r3, #0]

	*pGPIO_OP		 &= ~(0xf );
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f023 020f 	bic.w	r2, r3, #15
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]

	*pGPIO_pullup 	 &= 0x00;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
	*pGPIO_pullup    |= (0x55 << 8);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f443 42aa 	orr.w	r2, r3, #21760	; 0x5500
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	601a      	str	r2, [r3, #0]
	//implement the key detect logic as per the flow chart

    /* Loop forever */
	while(1)
	{
		*pGPIO_OP  |= 0xf;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f043 020f 	orr.w	r2, r3, #15
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	601a      	str	r2, [r3, #0]
		*pGPIO_OP  &= ~(0x1 << 0);
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f023 0201 	bic.w	r2, r3, #1
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]
		if(!(*pGPIO_IP & (0x1 << 4)))
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f003 0310 	and.w	r3, r3, #16
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <main+0x8e>
		{
			delay(); // delay
 80002b0:	f7ff ffa8 	bl	8000204 <delay>
			printf("1");
 80002b4:	2031      	movs	r0, #49	; 0x31
 80002b6:	f000 fa1b 	bl	80006f0 <putchar>
		}
		if(!(*pGPIO_IP & (0x1 << 5)))
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f003 0320 	and.w	r3, r3, #32
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d104      	bne.n	80002d0 <main+0xa4>
		{
			delay(); // delay
 80002c6:	f7ff ff9d 	bl	8000204 <delay>
			printf("2\n");
 80002ca:	4869      	ldr	r0, [pc, #420]	; (8000470 <main+0x244>)
 80002cc:	f000 fa80 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 6)))
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d104      	bne.n	80002e6 <main+0xba>
		{
			delay(); // delay
 80002dc:	f7ff ff92 	bl	8000204 <delay>
			printf("3\n");
 80002e0:	4864      	ldr	r0, [pc, #400]	; (8000474 <main+0x248>)
 80002e2:	f000 fa75 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 7)))
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d104      	bne.n	80002fc <main+0xd0>
		{
			delay(); // delay
 80002f2:	f7ff ff87 	bl	8000204 <delay>
			printf("A\n");
 80002f6:	4860      	ldr	r0, [pc, #384]	; (8000478 <main+0x24c>)
 80002f8:	f000 fa6a 	bl	80007d0 <puts>
		}

		delay(); // delay
 80002fc:	f7ff ff82 	bl	8000204 <delay>
		*pGPIO_OP  |= 0xf;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f043 020f 	orr.w	r2, r3, #15
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	601a      	str	r2, [r3, #0]
		*pGPIO_OP  &= ~(0x1 << 1);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 0202 	bic.w	r2, r3, #2
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	601a      	str	r2, [r3, #0]
		if(!(*pGPIO_IP & (0x1 << 4)))
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0310 	and.w	r3, r3, #16
 8000320:	2b00      	cmp	r3, #0
 8000322:	d104      	bne.n	800032e <main+0x102>
		{
			delay(); // delay
 8000324:	f7ff ff6e 	bl	8000204 <delay>
			printf("4\n");
 8000328:	4854      	ldr	r0, [pc, #336]	; (800047c <main+0x250>)
 800032a:	f000 fa51 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 5)))
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	2b00      	cmp	r3, #0
 8000338:	d104      	bne.n	8000344 <main+0x118>
		{
			delay(); // delay
 800033a:	f7ff ff63 	bl	8000204 <delay>
			printf("5\n");
 800033e:	4850      	ldr	r0, [pc, #320]	; (8000480 <main+0x254>)
 8000340:	f000 fa46 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 6)))
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800034c:	2b00      	cmp	r3, #0
 800034e:	d104      	bne.n	800035a <main+0x12e>
		{
			delay(); // delay
 8000350:	f7ff ff58 	bl	8000204 <delay>
			printf("6\n");
 8000354:	484b      	ldr	r0, [pc, #300]	; (8000484 <main+0x258>)
 8000356:	f000 fa3b 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 7)))
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000362:	2b00      	cmp	r3, #0
 8000364:	d104      	bne.n	8000370 <main+0x144>
		{
			delay(); // delay
 8000366:	f7ff ff4d 	bl	8000204 <delay>
			printf("B\n");
 800036a:	4847      	ldr	r0, [pc, #284]	; (8000488 <main+0x25c>)
 800036c:	f000 fa30 	bl	80007d0 <puts>
		}

		delay(); // delay
 8000370:	f7ff ff48 	bl	8000204 <delay>
		*pGPIO_OP  |= 0xf;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 020f 	orr.w	r2, r3, #15
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	601a      	str	r2, [r3, #0]
		*pGPIO_OP  &= ~(0x1 << 2);
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f023 0204 	bic.w	r2, r3, #4
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	601a      	str	r2, [r3, #0]
		if(!(*pGPIO_IP & (0x1 << 4)))
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	2b00      	cmp	r3, #0
 8000396:	d104      	bne.n	80003a2 <main+0x176>
		{
			delay(); // delay
 8000398:	f7ff ff34 	bl	8000204 <delay>
			printf("7\n");
 800039c:	483b      	ldr	r0, [pc, #236]	; (800048c <main+0x260>)
 800039e:	f000 fa17 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 5)))
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d104      	bne.n	80003b8 <main+0x18c>
		{
			delay(); // delay
 80003ae:	f7ff ff29 	bl	8000204 <delay>
			printf("8\n");
 80003b2:	4837      	ldr	r0, [pc, #220]	; (8000490 <main+0x264>)
 80003b4:	f000 fa0c 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 6)))
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d104      	bne.n	80003ce <main+0x1a2>
		{
			delay(); // delay
 80003c4:	f7ff ff1e 	bl	8000204 <delay>
			printf("9\n");
 80003c8:	4832      	ldr	r0, [pc, #200]	; (8000494 <main+0x268>)
 80003ca:	f000 fa01 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 7)))
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d104      	bne.n	80003e4 <main+0x1b8>
		{
			delay(); // delay
 80003da:	f7ff ff13 	bl	8000204 <delay>
			printf("C\n");
 80003de:	482e      	ldr	r0, [pc, #184]	; (8000498 <main+0x26c>)
 80003e0:	f000 f9f6 	bl	80007d0 <puts>
		}

		delay(); // delay
 80003e4:	f7ff ff0e 	bl	8000204 <delay>
		*pGPIO_OP  |= 0xf;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f043 020f 	orr.w	r2, r3, #15
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	601a      	str	r2, [r3, #0]
		*pGPIO_OP  &= ~(0x1 << 3);
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f023 0208 	bic.w	r2, r3, #8
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	601a      	str	r2, [r3, #0]
		if(!(*pGPIO_IP & (0x1 << 4)))
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	2b00      	cmp	r3, #0
 800040a:	d104      	bne.n	8000416 <main+0x1ea>
		{
			delay(); // delay
 800040c:	f7ff fefa 	bl	8000204 <delay>
			printf("*\n");
 8000410:	4822      	ldr	r0, [pc, #136]	; (800049c <main+0x270>)
 8000412:	f000 f9dd 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 5)))
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 0320 	and.w	r3, r3, #32
 800041e:	2b00      	cmp	r3, #0
 8000420:	d104      	bne.n	800042c <main+0x200>
		{
			delay(); // delay
 8000422:	f7ff feef 	bl	8000204 <delay>
			printf("0\n");
 8000426:	481e      	ldr	r0, [pc, #120]	; (80004a0 <main+0x274>)
 8000428:	f000 f9d2 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 6)))
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000434:	2b00      	cmp	r3, #0
 8000436:	d104      	bne.n	8000442 <main+0x216>
		{
			delay(); // delay
 8000438:	f7ff fee4 	bl	8000204 <delay>
			printf("#\n");
 800043c:	4819      	ldr	r0, [pc, #100]	; (80004a4 <main+0x278>)
 800043e:	f000 f9c7 	bl	80007d0 <puts>
		}
		if(!(*pGPIO_IP & (0x1 << 7)))
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800044a:	2b00      	cmp	r3, #0
 800044c:	f47f af1e 	bne.w	800028c <main+0x60>
		{
			delay(); // delay
 8000450:	f7ff fed8 	bl	8000204 <delay>
			printf("D\n");
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <main+0x27c>)
 8000456:	f000 f9bb 	bl	80007d0 <puts>
		*pGPIO_OP  |= 0xf;
 800045a:	e717      	b.n	800028c <main+0x60>
 800045c:	40023830 	.word	0x40023830
 8000460:	40020400 	.word	0x40020400
 8000464:	40020414 	.word	0x40020414
 8000468:	40020410 	.word	0x40020410
 800046c:	4002040c 	.word	0x4002040c
 8000470:	0800106c 	.word	0x0800106c
 8000474:	08001070 	.word	0x08001070
 8000478:	08001074 	.word	0x08001074
 800047c:	08001078 	.word	0x08001078
 8000480:	0800107c 	.word	0x0800107c
 8000484:	08001080 	.word	0x08001080
 8000488:	08001084 	.word	0x08001084
 800048c:	08001088 	.word	0x08001088
 8000490:	0800108c 	.word	0x0800108c
 8000494:	08001090 	.word	0x08001090
 8000498:	08001094 	.word	0x08001094
 800049c:	08001098 	.word	0x08001098
 80004a0:	0800109c 	.word	0x0800109c
 80004a4:	080010a0 	.word	0x080010a0
 80004a8:	080010a4 	.word	0x080010a4

080004ac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <ITM_SendChar+0x44>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <ITM_SendChar+0x44>)
 80004bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004c0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <ITM_SendChar+0x48>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <ITM_SendChar+0x48>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ce:	bf00      	nop
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f8      	beq.n	80004d0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	e000edfc 	.word	0xe000edfc
 80004f4:	e0000e00 	.word	0xe0000e00

080004f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	e00a      	b.n	8000520 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800050a:	f3af 8000 	nop.w
 800050e:	4601      	mov	r1, r0
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	b2ca      	uxtb	r2, r1
 8000518:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf0      	blt.n	800050a <_read+0x12>
	}

return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b086      	sub	sp, #24
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	e009      	b.n	8000558 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffad 	bl	80004ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	3301      	adds	r3, #1
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	dbf1      	blt.n	8000544 <_write+0x12>
	}
	return len;
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3718      	adds	r7, #24
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <_close>:

int _close(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	return -1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000590:	605a      	str	r2, [r3, #4]
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <_isatty>:

int _isatty(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
	return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	60f8      	str	r0, [r7, #12]
 80005ba:	60b9      	str	r1, [r7, #8]
 80005bc:	607a      	str	r2, [r7, #4]
	return 0;
 80005be:	2300      	movs	r3, #0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
	...

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	; (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f000 f846 	bl	800068c <__errno>
 8000600:	4602      	mov	r2, r0
 8000602:	230c      	movs	r3, #12
 8000604:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20020000 	.word	0x20020000
 800062c:	00000400 	.word	0x00000400
 8000630:	20000080 	.word	0x20000080
 8000634:	20000090 	.word	0x20000090

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800063c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	; (8000684 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000666:	f000 f817 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fddf 	bl	800022c <main>

0800066e <LoopForever>:

LoopForever:
    b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800067c:	08001114 	.word	0x08001114
  ldr r2, =_sbss
 8000680:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000684:	20000090 	.word	0x20000090

08000688 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC_IRQHandler>
	...

0800068c <__errno>:
 800068c:	4b01      	ldr	r3, [pc, #4]	; (8000694 <__errno+0x8>)
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	4e0d      	ldr	r6, [pc, #52]	; (80006d0 <__libc_init_array+0x38>)
 800069c:	4c0d      	ldr	r4, [pc, #52]	; (80006d4 <__libc_init_array+0x3c>)
 800069e:	1ba4      	subs	r4, r4, r6
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	2500      	movs	r5, #0
 80006a4:	42a5      	cmp	r5, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	4e0b      	ldr	r6, [pc, #44]	; (80006d8 <__libc_init_array+0x40>)
 80006aa:	4c0c      	ldr	r4, [pc, #48]	; (80006dc <__libc_init_array+0x44>)
 80006ac:	f000 fcd2 	bl	8001054 <_init>
 80006b0:	1ba4      	subs	r4, r4, r6
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	2500      	movs	r5, #0
 80006b6:	42a5      	cmp	r5, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006c0:	4798      	blx	r3
 80006c2:	3501      	adds	r5, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ca:	4798      	blx	r3
 80006cc:	3501      	adds	r5, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	0800110c 	.word	0x0800110c
 80006d4:	0800110c 	.word	0x0800110c
 80006d8:	0800110c 	.word	0x0800110c
 80006dc:	08001110 	.word	0x08001110

080006e0 <memset>:
 80006e0:	4402      	add	r2, r0
 80006e2:	4603      	mov	r3, r0
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d100      	bne.n	80006ea <memset+0xa>
 80006e8:	4770      	bx	lr
 80006ea:	f803 1b01 	strb.w	r1, [r3], #1
 80006ee:	e7f9      	b.n	80006e4 <memset+0x4>

080006f0 <putchar>:
 80006f0:	b538      	push	{r3, r4, r5, lr}
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <putchar+0x24>)
 80006f4:	681c      	ldr	r4, [r3, #0]
 80006f6:	4605      	mov	r5, r0
 80006f8:	b124      	cbz	r4, 8000704 <putchar+0x14>
 80006fa:	69a3      	ldr	r3, [r4, #24]
 80006fc:	b913      	cbnz	r3, 8000704 <putchar+0x14>
 80006fe:	4620      	mov	r0, r4
 8000700:	f000 fa1e 	bl	8000b40 <__sinit>
 8000704:	68a2      	ldr	r2, [r4, #8]
 8000706:	4629      	mov	r1, r5
 8000708:	4620      	mov	r0, r4
 800070a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800070e:	f000 bbad 	b.w	8000e6c <_putc_r>
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000

08000718 <_puts_r>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	460e      	mov	r6, r1
 800071c:	4605      	mov	r5, r0
 800071e:	b118      	cbz	r0, 8000728 <_puts_r+0x10>
 8000720:	6983      	ldr	r3, [r0, #24]
 8000722:	b90b      	cbnz	r3, 8000728 <_puts_r+0x10>
 8000724:	f000 fa0c 	bl	8000b40 <__sinit>
 8000728:	69ab      	ldr	r3, [r5, #24]
 800072a:	68ac      	ldr	r4, [r5, #8]
 800072c:	b913      	cbnz	r3, 8000734 <_puts_r+0x1c>
 800072e:	4628      	mov	r0, r5
 8000730:	f000 fa06 	bl	8000b40 <__sinit>
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <_puts_r+0xac>)
 8000736:	429c      	cmp	r4, r3
 8000738:	d117      	bne.n	800076a <_puts_r+0x52>
 800073a:	686c      	ldr	r4, [r5, #4]
 800073c:	89a3      	ldrh	r3, [r4, #12]
 800073e:	071b      	lsls	r3, r3, #28
 8000740:	d51d      	bpl.n	800077e <_puts_r+0x66>
 8000742:	6923      	ldr	r3, [r4, #16]
 8000744:	b1db      	cbz	r3, 800077e <_puts_r+0x66>
 8000746:	3e01      	subs	r6, #1
 8000748:	68a3      	ldr	r3, [r4, #8]
 800074a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800074e:	3b01      	subs	r3, #1
 8000750:	60a3      	str	r3, [r4, #8]
 8000752:	b9e9      	cbnz	r1, 8000790 <_puts_r+0x78>
 8000754:	2b00      	cmp	r3, #0
 8000756:	da2e      	bge.n	80007b6 <_puts_r+0x9e>
 8000758:	4622      	mov	r2, r4
 800075a:	210a      	movs	r1, #10
 800075c:	4628      	mov	r0, r5
 800075e:	f000 f83f 	bl	80007e0 <__swbuf_r>
 8000762:	3001      	adds	r0, #1
 8000764:	d011      	beq.n	800078a <_puts_r+0x72>
 8000766:	200a      	movs	r0, #10
 8000768:	e011      	b.n	800078e <_puts_r+0x76>
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <_puts_r+0xb0>)
 800076c:	429c      	cmp	r4, r3
 800076e:	d101      	bne.n	8000774 <_puts_r+0x5c>
 8000770:	68ac      	ldr	r4, [r5, #8]
 8000772:	e7e3      	b.n	800073c <_puts_r+0x24>
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <_puts_r+0xb4>)
 8000776:	429c      	cmp	r4, r3
 8000778:	bf08      	it	eq
 800077a:	68ec      	ldreq	r4, [r5, #12]
 800077c:	e7de      	b.n	800073c <_puts_r+0x24>
 800077e:	4621      	mov	r1, r4
 8000780:	4628      	mov	r0, r5
 8000782:	f000 f87f 	bl	8000884 <__swsetup_r>
 8000786:	2800      	cmp	r0, #0
 8000788:	d0dd      	beq.n	8000746 <_puts_r+0x2e>
 800078a:	f04f 30ff 	mov.w	r0, #4294967295
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	2b00      	cmp	r3, #0
 8000792:	da04      	bge.n	800079e <_puts_r+0x86>
 8000794:	69a2      	ldr	r2, [r4, #24]
 8000796:	429a      	cmp	r2, r3
 8000798:	dc06      	bgt.n	80007a8 <_puts_r+0x90>
 800079a:	290a      	cmp	r1, #10
 800079c:	d004      	beq.n	80007a8 <_puts_r+0x90>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	6022      	str	r2, [r4, #0]
 80007a4:	7019      	strb	r1, [r3, #0]
 80007a6:	e7cf      	b.n	8000748 <_puts_r+0x30>
 80007a8:	4622      	mov	r2, r4
 80007aa:	4628      	mov	r0, r5
 80007ac:	f000 f818 	bl	80007e0 <__swbuf_r>
 80007b0:	3001      	adds	r0, #1
 80007b2:	d1c9      	bne.n	8000748 <_puts_r+0x30>
 80007b4:	e7e9      	b.n	800078a <_puts_r+0x72>
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	200a      	movs	r0, #10
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	6022      	str	r2, [r4, #0]
 80007be:	7018      	strb	r0, [r3, #0]
 80007c0:	e7e5      	b.n	800078e <_puts_r+0x76>
 80007c2:	bf00      	nop
 80007c4:	080010cc 	.word	0x080010cc
 80007c8:	080010ec 	.word	0x080010ec
 80007cc:	080010ac 	.word	0x080010ac

080007d0 <puts>:
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <puts+0xc>)
 80007d2:	4601      	mov	r1, r0
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	f7ff bf9f 	b.w	8000718 <_puts_r>
 80007da:	bf00      	nop
 80007dc:	20000000 	.word	0x20000000

080007e0 <__swbuf_r>:
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	460e      	mov	r6, r1
 80007e4:	4614      	mov	r4, r2
 80007e6:	4605      	mov	r5, r0
 80007e8:	b118      	cbz	r0, 80007f2 <__swbuf_r+0x12>
 80007ea:	6983      	ldr	r3, [r0, #24]
 80007ec:	b90b      	cbnz	r3, 80007f2 <__swbuf_r+0x12>
 80007ee:	f000 f9a7 	bl	8000b40 <__sinit>
 80007f2:	4b21      	ldr	r3, [pc, #132]	; (8000878 <__swbuf_r+0x98>)
 80007f4:	429c      	cmp	r4, r3
 80007f6:	d12a      	bne.n	800084e <__swbuf_r+0x6e>
 80007f8:	686c      	ldr	r4, [r5, #4]
 80007fa:	69a3      	ldr	r3, [r4, #24]
 80007fc:	60a3      	str	r3, [r4, #8]
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	071a      	lsls	r2, r3, #28
 8000802:	d52e      	bpl.n	8000862 <__swbuf_r+0x82>
 8000804:	6923      	ldr	r3, [r4, #16]
 8000806:	b363      	cbz	r3, 8000862 <__swbuf_r+0x82>
 8000808:	6923      	ldr	r3, [r4, #16]
 800080a:	6820      	ldr	r0, [r4, #0]
 800080c:	1ac0      	subs	r0, r0, r3
 800080e:	6963      	ldr	r3, [r4, #20]
 8000810:	b2f6      	uxtb	r6, r6
 8000812:	4283      	cmp	r3, r0
 8000814:	4637      	mov	r7, r6
 8000816:	dc04      	bgt.n	8000822 <__swbuf_r+0x42>
 8000818:	4621      	mov	r1, r4
 800081a:	4628      	mov	r0, r5
 800081c:	f000 f926 	bl	8000a6c <_fflush_r>
 8000820:	bb28      	cbnz	r0, 800086e <__swbuf_r+0x8e>
 8000822:	68a3      	ldr	r3, [r4, #8]
 8000824:	3b01      	subs	r3, #1
 8000826:	60a3      	str	r3, [r4, #8]
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	6022      	str	r2, [r4, #0]
 800082e:	701e      	strb	r6, [r3, #0]
 8000830:	6963      	ldr	r3, [r4, #20]
 8000832:	3001      	adds	r0, #1
 8000834:	4283      	cmp	r3, r0
 8000836:	d004      	beq.n	8000842 <__swbuf_r+0x62>
 8000838:	89a3      	ldrh	r3, [r4, #12]
 800083a:	07db      	lsls	r3, r3, #31
 800083c:	d519      	bpl.n	8000872 <__swbuf_r+0x92>
 800083e:	2e0a      	cmp	r6, #10
 8000840:	d117      	bne.n	8000872 <__swbuf_r+0x92>
 8000842:	4621      	mov	r1, r4
 8000844:	4628      	mov	r0, r5
 8000846:	f000 f911 	bl	8000a6c <_fflush_r>
 800084a:	b190      	cbz	r0, 8000872 <__swbuf_r+0x92>
 800084c:	e00f      	b.n	800086e <__swbuf_r+0x8e>
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <__swbuf_r+0x9c>)
 8000850:	429c      	cmp	r4, r3
 8000852:	d101      	bne.n	8000858 <__swbuf_r+0x78>
 8000854:	68ac      	ldr	r4, [r5, #8]
 8000856:	e7d0      	b.n	80007fa <__swbuf_r+0x1a>
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <__swbuf_r+0xa0>)
 800085a:	429c      	cmp	r4, r3
 800085c:	bf08      	it	eq
 800085e:	68ec      	ldreq	r4, [r5, #12]
 8000860:	e7cb      	b.n	80007fa <__swbuf_r+0x1a>
 8000862:	4621      	mov	r1, r4
 8000864:	4628      	mov	r0, r5
 8000866:	f000 f80d 	bl	8000884 <__swsetup_r>
 800086a:	2800      	cmp	r0, #0
 800086c:	d0cc      	beq.n	8000808 <__swbuf_r+0x28>
 800086e:	f04f 37ff 	mov.w	r7, #4294967295
 8000872:	4638      	mov	r0, r7
 8000874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000876:	bf00      	nop
 8000878:	080010cc 	.word	0x080010cc
 800087c:	080010ec 	.word	0x080010ec
 8000880:	080010ac 	.word	0x080010ac

08000884 <__swsetup_r>:
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <__swsetup_r+0xcc>)
 8000886:	b570      	push	{r4, r5, r6, lr}
 8000888:	681d      	ldr	r5, [r3, #0]
 800088a:	4606      	mov	r6, r0
 800088c:	460c      	mov	r4, r1
 800088e:	b125      	cbz	r5, 800089a <__swsetup_r+0x16>
 8000890:	69ab      	ldr	r3, [r5, #24]
 8000892:	b913      	cbnz	r3, 800089a <__swsetup_r+0x16>
 8000894:	4628      	mov	r0, r5
 8000896:	f000 f953 	bl	8000b40 <__sinit>
 800089a:	4b2e      	ldr	r3, [pc, #184]	; (8000954 <__swsetup_r+0xd0>)
 800089c:	429c      	cmp	r4, r3
 800089e:	d10f      	bne.n	80008c0 <__swsetup_r+0x3c>
 80008a0:	686c      	ldr	r4, [r5, #4]
 80008a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	0715      	lsls	r5, r2, #28
 80008aa:	d42c      	bmi.n	8000906 <__swsetup_r+0x82>
 80008ac:	06d0      	lsls	r0, r2, #27
 80008ae:	d411      	bmi.n	80008d4 <__swsetup_r+0x50>
 80008b0:	2209      	movs	r2, #9
 80008b2:	6032      	str	r2, [r6, #0]
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	81a3      	strh	r3, [r4, #12]
 80008ba:	f04f 30ff 	mov.w	r0, #4294967295
 80008be:	e03e      	b.n	800093e <__swsetup_r+0xba>
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <__swsetup_r+0xd4>)
 80008c2:	429c      	cmp	r4, r3
 80008c4:	d101      	bne.n	80008ca <__swsetup_r+0x46>
 80008c6:	68ac      	ldr	r4, [r5, #8]
 80008c8:	e7eb      	b.n	80008a2 <__swsetup_r+0x1e>
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <__swsetup_r+0xd8>)
 80008cc:	429c      	cmp	r4, r3
 80008ce:	bf08      	it	eq
 80008d0:	68ec      	ldreq	r4, [r5, #12]
 80008d2:	e7e6      	b.n	80008a2 <__swsetup_r+0x1e>
 80008d4:	0751      	lsls	r1, r2, #29
 80008d6:	d512      	bpl.n	80008fe <__swsetup_r+0x7a>
 80008d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008da:	b141      	cbz	r1, 80008ee <__swsetup_r+0x6a>
 80008dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008e0:	4299      	cmp	r1, r3
 80008e2:	d002      	beq.n	80008ea <__swsetup_r+0x66>
 80008e4:	4630      	mov	r0, r6
 80008e6:	f000 fa19 	bl	8000d1c <_free_r>
 80008ea:	2300      	movs	r3, #0
 80008ec:	6363      	str	r3, [r4, #52]	; 0x34
 80008ee:	89a3      	ldrh	r3, [r4, #12]
 80008f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008f4:	81a3      	strh	r3, [r4, #12]
 80008f6:	2300      	movs	r3, #0
 80008f8:	6063      	str	r3, [r4, #4]
 80008fa:	6923      	ldr	r3, [r4, #16]
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	89a3      	ldrh	r3, [r4, #12]
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	81a3      	strh	r3, [r4, #12]
 8000906:	6923      	ldr	r3, [r4, #16]
 8000908:	b94b      	cbnz	r3, 800091e <__swsetup_r+0x9a>
 800090a:	89a3      	ldrh	r3, [r4, #12]
 800090c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000914:	d003      	beq.n	800091e <__swsetup_r+0x9a>
 8000916:	4621      	mov	r1, r4
 8000918:	4630      	mov	r0, r6
 800091a:	f000 f9bf 	bl	8000c9c <__smakebuf_r>
 800091e:	89a2      	ldrh	r2, [r4, #12]
 8000920:	f012 0301 	ands.w	r3, r2, #1
 8000924:	d00c      	beq.n	8000940 <__swsetup_r+0xbc>
 8000926:	2300      	movs	r3, #0
 8000928:	60a3      	str	r3, [r4, #8]
 800092a:	6963      	ldr	r3, [r4, #20]
 800092c:	425b      	negs	r3, r3
 800092e:	61a3      	str	r3, [r4, #24]
 8000930:	6923      	ldr	r3, [r4, #16]
 8000932:	b953      	cbnz	r3, 800094a <__swsetup_r+0xc6>
 8000934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000938:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800093c:	d1ba      	bne.n	80008b4 <__swsetup_r+0x30>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	0792      	lsls	r2, r2, #30
 8000942:	bf58      	it	pl
 8000944:	6963      	ldrpl	r3, [r4, #20]
 8000946:	60a3      	str	r3, [r4, #8]
 8000948:	e7f2      	b.n	8000930 <__swsetup_r+0xac>
 800094a:	2000      	movs	r0, #0
 800094c:	e7f7      	b.n	800093e <__swsetup_r+0xba>
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000
 8000954:	080010cc 	.word	0x080010cc
 8000958:	080010ec 	.word	0x080010ec
 800095c:	080010ac 	.word	0x080010ac

08000960 <__sflush_r>:
 8000960:	898a      	ldrh	r2, [r1, #12]
 8000962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000966:	4605      	mov	r5, r0
 8000968:	0710      	lsls	r0, r2, #28
 800096a:	460c      	mov	r4, r1
 800096c:	d458      	bmi.n	8000a20 <__sflush_r+0xc0>
 800096e:	684b      	ldr	r3, [r1, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	dc05      	bgt.n	8000980 <__sflush_r+0x20>
 8000974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000976:	2b00      	cmp	r3, #0
 8000978:	dc02      	bgt.n	8000980 <__sflush_r+0x20>
 800097a:	2000      	movs	r0, #0
 800097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000982:	2e00      	cmp	r6, #0
 8000984:	d0f9      	beq.n	800097a <__sflush_r+0x1a>
 8000986:	2300      	movs	r3, #0
 8000988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800098c:	682f      	ldr	r7, [r5, #0]
 800098e:	6a21      	ldr	r1, [r4, #32]
 8000990:	602b      	str	r3, [r5, #0]
 8000992:	d032      	beq.n	80009fa <__sflush_r+0x9a>
 8000994:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	075a      	lsls	r2, r3, #29
 800099a:	d505      	bpl.n	80009a8 <__sflush_r+0x48>
 800099c:	6863      	ldr	r3, [r4, #4]
 800099e:	1ac0      	subs	r0, r0, r3
 80009a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80009a2:	b10b      	cbz	r3, 80009a8 <__sflush_r+0x48>
 80009a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a6:	1ac0      	subs	r0, r0, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	4602      	mov	r2, r0
 80009ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009ae:	6a21      	ldr	r1, [r4, #32]
 80009b0:	4628      	mov	r0, r5
 80009b2:	47b0      	blx	r6
 80009b4:	1c43      	adds	r3, r0, #1
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	d106      	bne.n	80009c8 <__sflush_r+0x68>
 80009ba:	6829      	ldr	r1, [r5, #0]
 80009bc:	291d      	cmp	r1, #29
 80009be:	d848      	bhi.n	8000a52 <__sflush_r+0xf2>
 80009c0:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <__sflush_r+0x108>)
 80009c2:	40ca      	lsrs	r2, r1
 80009c4:	07d6      	lsls	r6, r2, #31
 80009c6:	d544      	bpl.n	8000a52 <__sflush_r+0xf2>
 80009c8:	2200      	movs	r2, #0
 80009ca:	6062      	str	r2, [r4, #4]
 80009cc:	04d9      	lsls	r1, r3, #19
 80009ce:	6922      	ldr	r2, [r4, #16]
 80009d0:	6022      	str	r2, [r4, #0]
 80009d2:	d504      	bpl.n	80009de <__sflush_r+0x7e>
 80009d4:	1c42      	adds	r2, r0, #1
 80009d6:	d101      	bne.n	80009dc <__sflush_r+0x7c>
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	b903      	cbnz	r3, 80009de <__sflush_r+0x7e>
 80009dc:	6560      	str	r0, [r4, #84]	; 0x54
 80009de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009e0:	602f      	str	r7, [r5, #0]
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d0c9      	beq.n	800097a <__sflush_r+0x1a>
 80009e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009ea:	4299      	cmp	r1, r3
 80009ec:	d002      	beq.n	80009f4 <__sflush_r+0x94>
 80009ee:	4628      	mov	r0, r5
 80009f0:	f000 f994 	bl	8000d1c <_free_r>
 80009f4:	2000      	movs	r0, #0
 80009f6:	6360      	str	r0, [r4, #52]	; 0x34
 80009f8:	e7c0      	b.n	800097c <__sflush_r+0x1c>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4628      	mov	r0, r5
 80009fe:	47b0      	blx	r6
 8000a00:	1c41      	adds	r1, r0, #1
 8000a02:	d1c8      	bne.n	8000996 <__sflush_r+0x36>
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0c5      	beq.n	8000996 <__sflush_r+0x36>
 8000a0a:	2b1d      	cmp	r3, #29
 8000a0c:	d001      	beq.n	8000a12 <__sflush_r+0xb2>
 8000a0e:	2b16      	cmp	r3, #22
 8000a10:	d101      	bne.n	8000a16 <__sflush_r+0xb6>
 8000a12:	602f      	str	r7, [r5, #0]
 8000a14:	e7b1      	b.n	800097a <__sflush_r+0x1a>
 8000a16:	89a3      	ldrh	r3, [r4, #12]
 8000a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1c:	81a3      	strh	r3, [r4, #12]
 8000a1e:	e7ad      	b.n	800097c <__sflush_r+0x1c>
 8000a20:	690f      	ldr	r7, [r1, #16]
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	d0a9      	beq.n	800097a <__sflush_r+0x1a>
 8000a26:	0793      	lsls	r3, r2, #30
 8000a28:	680e      	ldr	r6, [r1, #0]
 8000a2a:	bf08      	it	eq
 8000a2c:	694b      	ldreq	r3, [r1, #20]
 8000a2e:	600f      	str	r7, [r1, #0]
 8000a30:	bf18      	it	ne
 8000a32:	2300      	movne	r3, #0
 8000a34:	eba6 0807 	sub.w	r8, r6, r7
 8000a38:	608b      	str	r3, [r1, #8]
 8000a3a:	f1b8 0f00 	cmp.w	r8, #0
 8000a3e:	dd9c      	ble.n	800097a <__sflush_r+0x1a>
 8000a40:	4643      	mov	r3, r8
 8000a42:	463a      	mov	r2, r7
 8000a44:	6a21      	ldr	r1, [r4, #32]
 8000a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a48:	4628      	mov	r0, r5
 8000a4a:	47b0      	blx	r6
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	dc06      	bgt.n	8000a5e <__sflush_r+0xfe>
 8000a50:	89a3      	ldrh	r3, [r4, #12]
 8000a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a56:	81a3      	strh	r3, [r4, #12]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	e78e      	b.n	800097c <__sflush_r+0x1c>
 8000a5e:	4407      	add	r7, r0
 8000a60:	eba8 0800 	sub.w	r8, r8, r0
 8000a64:	e7e9      	b.n	8000a3a <__sflush_r+0xda>
 8000a66:	bf00      	nop
 8000a68:	20400001 	.word	0x20400001

08000a6c <_fflush_r>:
 8000a6c:	b538      	push	{r3, r4, r5, lr}
 8000a6e:	690b      	ldr	r3, [r1, #16]
 8000a70:	4605      	mov	r5, r0
 8000a72:	460c      	mov	r4, r1
 8000a74:	b1db      	cbz	r3, 8000aae <_fflush_r+0x42>
 8000a76:	b118      	cbz	r0, 8000a80 <_fflush_r+0x14>
 8000a78:	6983      	ldr	r3, [r0, #24]
 8000a7a:	b90b      	cbnz	r3, 8000a80 <_fflush_r+0x14>
 8000a7c:	f000 f860 	bl	8000b40 <__sinit>
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <_fflush_r+0x48>)
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d109      	bne.n	8000a9a <_fflush_r+0x2e>
 8000a86:	686c      	ldr	r4, [r5, #4]
 8000a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a8c:	b17b      	cbz	r3, 8000aae <_fflush_r+0x42>
 8000a8e:	4621      	mov	r1, r4
 8000a90:	4628      	mov	r0, r5
 8000a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a96:	f7ff bf63 	b.w	8000960 <__sflush_r>
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <_fflush_r+0x4c>)
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	d101      	bne.n	8000aa4 <_fflush_r+0x38>
 8000aa0:	68ac      	ldr	r4, [r5, #8]
 8000aa2:	e7f1      	b.n	8000a88 <_fflush_r+0x1c>
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <_fflush_r+0x50>)
 8000aa6:	429c      	cmp	r4, r3
 8000aa8:	bf08      	it	eq
 8000aaa:	68ec      	ldreq	r4, [r5, #12]
 8000aac:	e7ec      	b.n	8000a88 <_fflush_r+0x1c>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
 8000ab2:	bf00      	nop
 8000ab4:	080010cc 	.word	0x080010cc
 8000ab8:	080010ec 	.word	0x080010ec
 8000abc:	080010ac 	.word	0x080010ac

08000ac0 <std>:
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	b510      	push	{r4, lr}
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8000aca:	6083      	str	r3, [r0, #8]
 8000acc:	8181      	strh	r1, [r0, #12]
 8000ace:	6643      	str	r3, [r0, #100]	; 0x64
 8000ad0:	81c2      	strh	r2, [r0, #14]
 8000ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ad6:	6183      	str	r3, [r0, #24]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	2208      	movs	r2, #8
 8000adc:	305c      	adds	r0, #92	; 0x5c
 8000ade:	f7ff fdff 	bl	80006e0 <memset>
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <std+0x38>)
 8000ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <std+0x3c>)
 8000ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <std+0x40>)
 8000aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <std+0x44>)
 8000af0:	6224      	str	r4, [r4, #32]
 8000af2:	6323      	str	r3, [r4, #48]	; 0x30
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	bf00      	nop
 8000af8:	08000ef9 	.word	0x08000ef9
 8000afc:	08000f1b 	.word	0x08000f1b
 8000b00:	08000f53 	.word	0x08000f53
 8000b04:	08000f77 	.word	0x08000f77

08000b08 <_cleanup_r>:
 8000b08:	4901      	ldr	r1, [pc, #4]	; (8000b10 <_cleanup_r+0x8>)
 8000b0a:	f000 b885 	b.w	8000c18 <_fwalk_reent>
 8000b0e:	bf00      	nop
 8000b10:	08000a6d 	.word	0x08000a6d

08000b14 <__sfmoreglue>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	1e4a      	subs	r2, r1, #1
 8000b18:	2568      	movs	r5, #104	; 0x68
 8000b1a:	4355      	muls	r5, r2
 8000b1c:	460e      	mov	r6, r1
 8000b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b22:	f000 f949 	bl	8000db8 <_malloc_r>
 8000b26:	4604      	mov	r4, r0
 8000b28:	b140      	cbz	r0, 8000b3c <__sfmoreglue+0x28>
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8000b30:	300c      	adds	r0, #12
 8000b32:	60a0      	str	r0, [r4, #8]
 8000b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b38:	f7ff fdd2 	bl	80006e0 <memset>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}

08000b40 <__sinit>:
 8000b40:	6983      	ldr	r3, [r0, #24]
 8000b42:	b510      	push	{r4, lr}
 8000b44:	4604      	mov	r4, r0
 8000b46:	bb33      	cbnz	r3, 8000b96 <__sinit+0x56>
 8000b48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b4c:	6503      	str	r3, [r0, #80]	; 0x50
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <__sinit+0x58>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <__sinit+0x5c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6282      	str	r2, [r0, #40]	; 0x28
 8000b56:	4298      	cmp	r0, r3
 8000b58:	bf04      	itt	eq
 8000b5a:	2301      	moveq	r3, #1
 8000b5c:	6183      	streq	r3, [r0, #24]
 8000b5e:	f000 f81f 	bl	8000ba0 <__sfp>
 8000b62:	6060      	str	r0, [r4, #4]
 8000b64:	4620      	mov	r0, r4
 8000b66:	f000 f81b 	bl	8000ba0 <__sfp>
 8000b6a:	60a0      	str	r0, [r4, #8]
 8000b6c:	4620      	mov	r0, r4
 8000b6e:	f000 f817 	bl	8000ba0 <__sfp>
 8000b72:	2200      	movs	r2, #0
 8000b74:	60e0      	str	r0, [r4, #12]
 8000b76:	2104      	movs	r1, #4
 8000b78:	6860      	ldr	r0, [r4, #4]
 8000b7a:	f7ff ffa1 	bl	8000ac0 <std>
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2109      	movs	r1, #9
 8000b82:	68a0      	ldr	r0, [r4, #8]
 8000b84:	f7ff ff9c 	bl	8000ac0 <std>
 8000b88:	2202      	movs	r2, #2
 8000b8a:	2112      	movs	r1, #18
 8000b8c:	68e0      	ldr	r0, [r4, #12]
 8000b8e:	f7ff ff97 	bl	8000ac0 <std>
 8000b92:	2301      	movs	r3, #1
 8000b94:	61a3      	str	r3, [r4, #24]
 8000b96:	bd10      	pop	{r4, pc}
 8000b98:	080010a8 	.word	0x080010a8
 8000b9c:	08000b09 	.word	0x08000b09

08000ba0 <__sfp>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <__sfp+0x70>)
 8000ba4:	681e      	ldr	r6, [r3, #0]
 8000ba6:	69b3      	ldr	r3, [r6, #24]
 8000ba8:	4607      	mov	r7, r0
 8000baa:	b913      	cbnz	r3, 8000bb2 <__sfp+0x12>
 8000bac:	4630      	mov	r0, r6
 8000bae:	f7ff ffc7 	bl	8000b40 <__sinit>
 8000bb2:	3648      	adds	r6, #72	; 0x48
 8000bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	d503      	bpl.n	8000bc4 <__sfp+0x24>
 8000bbc:	6833      	ldr	r3, [r6, #0]
 8000bbe:	b133      	cbz	r3, 8000bce <__sfp+0x2e>
 8000bc0:	6836      	ldr	r6, [r6, #0]
 8000bc2:	e7f7      	b.n	8000bb4 <__sfp+0x14>
 8000bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bc8:	b16d      	cbz	r5, 8000be6 <__sfp+0x46>
 8000bca:	3468      	adds	r4, #104	; 0x68
 8000bcc:	e7f4      	b.n	8000bb8 <__sfp+0x18>
 8000bce:	2104      	movs	r1, #4
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	f7ff ff9f 	bl	8000b14 <__sfmoreglue>
 8000bd6:	6030      	str	r0, [r6, #0]
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	d1f1      	bne.n	8000bc0 <__sfp+0x20>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	4604      	mov	r4, r0
 8000be2:	4620      	mov	r0, r4
 8000be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <__sfp+0x74>)
 8000be8:	6665      	str	r5, [r4, #100]	; 0x64
 8000bea:	e9c4 5500 	strd	r5, r5, [r4]
 8000bee:	60a5      	str	r5, [r4, #8]
 8000bf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000bf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c00:	f7ff fd6e 	bl	80006e0 <memset>
 8000c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c0c:	e7e9      	b.n	8000be2 <__sfp+0x42>
 8000c0e:	bf00      	nop
 8000c10:	080010a8 	.word	0x080010a8
 8000c14:	ffff0001 	.word	0xffff0001

08000c18 <_fwalk_reent>:
 8000c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c1c:	4680      	mov	r8, r0
 8000c1e:	4689      	mov	r9, r1
 8000c20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c24:	2600      	movs	r6, #0
 8000c26:	b914      	cbnz	r4, 8000c2e <_fwalk_reent+0x16>
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c32:	3f01      	subs	r7, #1
 8000c34:	d501      	bpl.n	8000c3a <_fwalk_reent+0x22>
 8000c36:	6824      	ldr	r4, [r4, #0]
 8000c38:	e7f5      	b.n	8000c26 <_fwalk_reent+0xe>
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d907      	bls.n	8000c50 <_fwalk_reent+0x38>
 8000c40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c44:	3301      	adds	r3, #1
 8000c46:	d003      	beq.n	8000c50 <_fwalk_reent+0x38>
 8000c48:	4629      	mov	r1, r5
 8000c4a:	4640      	mov	r0, r8
 8000c4c:	47c8      	blx	r9
 8000c4e:	4306      	orrs	r6, r0
 8000c50:	3568      	adds	r5, #104	; 0x68
 8000c52:	e7ee      	b.n	8000c32 <_fwalk_reent+0x1a>

08000c54 <__swhatbuf_r>:
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	460e      	mov	r6, r1
 8000c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	b096      	sub	sp, #88	; 0x58
 8000c60:	4614      	mov	r4, r2
 8000c62:	461d      	mov	r5, r3
 8000c64:	da07      	bge.n	8000c76 <__swhatbuf_r+0x22>
 8000c66:	2300      	movs	r3, #0
 8000c68:	602b      	str	r3, [r5, #0]
 8000c6a:	89b3      	ldrh	r3, [r6, #12]
 8000c6c:	061a      	lsls	r2, r3, #24
 8000c6e:	d410      	bmi.n	8000c92 <__swhatbuf_r+0x3e>
 8000c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c74:	e00e      	b.n	8000c94 <__swhatbuf_r+0x40>
 8000c76:	466a      	mov	r2, sp
 8000c78:	f000 f9a4 	bl	8000fc4 <_fstat_r>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	dbf2      	blt.n	8000c66 <__swhatbuf_r+0x12>
 8000c80:	9a01      	ldr	r2, [sp, #4]
 8000c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c8a:	425a      	negs	r2, r3
 8000c8c:	415a      	adcs	r2, r3
 8000c8e:	602a      	str	r2, [r5, #0]
 8000c90:	e7ee      	b.n	8000c70 <__swhatbuf_r+0x1c>
 8000c92:	2340      	movs	r3, #64	; 0x40
 8000c94:	2000      	movs	r0, #0
 8000c96:	6023      	str	r3, [r4, #0]
 8000c98:	b016      	add	sp, #88	; 0x58
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}

08000c9c <__smakebuf_r>:
 8000c9c:	898b      	ldrh	r3, [r1, #12]
 8000c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ca0:	079d      	lsls	r5, r3, #30
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	d507      	bpl.n	8000cb8 <__smakebuf_r+0x1c>
 8000ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	6123      	str	r3, [r4, #16]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	6163      	str	r3, [r4, #20]
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
 8000cb8:	ab01      	add	r3, sp, #4
 8000cba:	466a      	mov	r2, sp
 8000cbc:	f7ff ffca 	bl	8000c54 <__swhatbuf_r>
 8000cc0:	9900      	ldr	r1, [sp, #0]
 8000cc2:	4605      	mov	r5, r0
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	f000 f877 	bl	8000db8 <_malloc_r>
 8000cca:	b948      	cbnz	r0, 8000ce0 <__smakebuf_r+0x44>
 8000ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cd0:	059a      	lsls	r2, r3, #22
 8000cd2:	d4ef      	bmi.n	8000cb4 <__smakebuf_r+0x18>
 8000cd4:	f023 0303 	bic.w	r3, r3, #3
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	e7e3      	b.n	8000ca8 <__smakebuf_r+0xc>
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <__smakebuf_r+0x7c>)
 8000ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	6020      	str	r0, [r4, #0]
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	81a3      	strh	r3, [r4, #12]
 8000cee:	9b00      	ldr	r3, [sp, #0]
 8000cf0:	6163      	str	r3, [r4, #20]
 8000cf2:	9b01      	ldr	r3, [sp, #4]
 8000cf4:	6120      	str	r0, [r4, #16]
 8000cf6:	b15b      	cbz	r3, 8000d10 <__smakebuf_r+0x74>
 8000cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	f000 f973 	bl	8000fe8 <_isatty_r>
 8000d02:	b128      	cbz	r0, 8000d10 <__smakebuf_r+0x74>
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	f023 0303 	bic.w	r3, r3, #3
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	81a3      	strh	r3, [r4, #12]
 8000d10:	89a3      	ldrh	r3, [r4, #12]
 8000d12:	431d      	orrs	r5, r3
 8000d14:	81a5      	strh	r5, [r4, #12]
 8000d16:	e7cd      	b.n	8000cb4 <__smakebuf_r+0x18>
 8000d18:	08000b09 	.word	0x08000b09

08000d1c <_free_r>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4605      	mov	r5, r0
 8000d20:	2900      	cmp	r1, #0
 8000d22:	d045      	beq.n	8000db0 <_free_r+0x94>
 8000d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d28:	1f0c      	subs	r4, r1, #4
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bfb8      	it	lt
 8000d2e:	18e4      	addlt	r4, r4, r3
 8000d30:	f000 f97c 	bl	800102c <__malloc_lock>
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <_free_r+0x98>)
 8000d36:	6813      	ldr	r3, [r2, #0]
 8000d38:	4610      	mov	r0, r2
 8000d3a:	b933      	cbnz	r3, 8000d4a <_free_r+0x2e>
 8000d3c:	6063      	str	r3, [r4, #4]
 8000d3e:	6014      	str	r4, [r2, #0]
 8000d40:	4628      	mov	r0, r5
 8000d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d46:	f000 b972 	b.w	800102e <__malloc_unlock>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d90c      	bls.n	8000d68 <_free_r+0x4c>
 8000d4e:	6821      	ldr	r1, [r4, #0]
 8000d50:	1862      	adds	r2, r4, r1
 8000d52:	4293      	cmp	r3, r2
 8000d54:	bf04      	itt	eq
 8000d56:	681a      	ldreq	r2, [r3, #0]
 8000d58:	685b      	ldreq	r3, [r3, #4]
 8000d5a:	6063      	str	r3, [r4, #4]
 8000d5c:	bf04      	itt	eq
 8000d5e:	1852      	addeq	r2, r2, r1
 8000d60:	6022      	streq	r2, [r4, #0]
 8000d62:	6004      	str	r4, [r0, #0]
 8000d64:	e7ec      	b.n	8000d40 <_free_r+0x24>
 8000d66:	4613      	mov	r3, r2
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	b10a      	cbz	r2, 8000d70 <_free_r+0x54>
 8000d6c:	42a2      	cmp	r2, r4
 8000d6e:	d9fa      	bls.n	8000d66 <_free_r+0x4a>
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	1858      	adds	r0, r3, r1
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	d10b      	bne.n	8000d90 <_free_r+0x74>
 8000d78:	6820      	ldr	r0, [r4, #0]
 8000d7a:	4401      	add	r1, r0
 8000d7c:	1858      	adds	r0, r3, r1
 8000d7e:	4282      	cmp	r2, r0
 8000d80:	6019      	str	r1, [r3, #0]
 8000d82:	d1dd      	bne.n	8000d40 <_free_r+0x24>
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	6852      	ldr	r2, [r2, #4]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	4401      	add	r1, r0
 8000d8c:	6019      	str	r1, [r3, #0]
 8000d8e:	e7d7      	b.n	8000d40 <_free_r+0x24>
 8000d90:	d902      	bls.n	8000d98 <_free_r+0x7c>
 8000d92:	230c      	movs	r3, #12
 8000d94:	602b      	str	r3, [r5, #0]
 8000d96:	e7d3      	b.n	8000d40 <_free_r+0x24>
 8000d98:	6820      	ldr	r0, [r4, #0]
 8000d9a:	1821      	adds	r1, r4, r0
 8000d9c:	428a      	cmp	r2, r1
 8000d9e:	bf04      	itt	eq
 8000da0:	6811      	ldreq	r1, [r2, #0]
 8000da2:	6852      	ldreq	r2, [r2, #4]
 8000da4:	6062      	str	r2, [r4, #4]
 8000da6:	bf04      	itt	eq
 8000da8:	1809      	addeq	r1, r1, r0
 8000daa:	6021      	streq	r1, [r4, #0]
 8000dac:	605c      	str	r4, [r3, #4]
 8000dae:	e7c7      	b.n	8000d40 <_free_r+0x24>
 8000db0:	bd38      	pop	{r3, r4, r5, pc}
 8000db2:	bf00      	nop
 8000db4:	20000084 	.word	0x20000084

08000db8 <_malloc_r>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	1ccd      	adds	r5, r1, #3
 8000dbc:	f025 0503 	bic.w	r5, r5, #3
 8000dc0:	3508      	adds	r5, #8
 8000dc2:	2d0c      	cmp	r5, #12
 8000dc4:	bf38      	it	cc
 8000dc6:	250c      	movcc	r5, #12
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	4606      	mov	r6, r0
 8000dcc:	db01      	blt.n	8000dd2 <_malloc_r+0x1a>
 8000dce:	42a9      	cmp	r1, r5
 8000dd0:	d903      	bls.n	8000dda <_malloc_r+0x22>
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	6033      	str	r3, [r6, #0]
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
 8000dda:	f000 f927 	bl	800102c <__malloc_lock>
 8000dde:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <_malloc_r+0xac>)
 8000de0:	6814      	ldr	r4, [r2, #0]
 8000de2:	4621      	mov	r1, r4
 8000de4:	b991      	cbnz	r1, 8000e0c <_malloc_r+0x54>
 8000de6:	4c20      	ldr	r4, [pc, #128]	; (8000e68 <_malloc_r+0xb0>)
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	b91b      	cbnz	r3, 8000df4 <_malloc_r+0x3c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	f000 f873 	bl	8000ed8 <_sbrk_r>
 8000df2:	6020      	str	r0, [r4, #0]
 8000df4:	4629      	mov	r1, r5
 8000df6:	4630      	mov	r0, r6
 8000df8:	f000 f86e 	bl	8000ed8 <_sbrk_r>
 8000dfc:	1c43      	adds	r3, r0, #1
 8000dfe:	d124      	bne.n	8000e4a <_malloc_r+0x92>
 8000e00:	230c      	movs	r3, #12
 8000e02:	6033      	str	r3, [r6, #0]
 8000e04:	4630      	mov	r0, r6
 8000e06:	f000 f912 	bl	800102e <__malloc_unlock>
 8000e0a:	e7e4      	b.n	8000dd6 <_malloc_r+0x1e>
 8000e0c:	680b      	ldr	r3, [r1, #0]
 8000e0e:	1b5b      	subs	r3, r3, r5
 8000e10:	d418      	bmi.n	8000e44 <_malloc_r+0x8c>
 8000e12:	2b0b      	cmp	r3, #11
 8000e14:	d90f      	bls.n	8000e36 <_malloc_r+0x7e>
 8000e16:	600b      	str	r3, [r1, #0]
 8000e18:	50cd      	str	r5, [r1, r3]
 8000e1a:	18cc      	adds	r4, r1, r3
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f000 f906 	bl	800102e <__malloc_unlock>
 8000e22:	f104 000b 	add.w	r0, r4, #11
 8000e26:	1d23      	adds	r3, r4, #4
 8000e28:	f020 0007 	bic.w	r0, r0, #7
 8000e2c:	1ac3      	subs	r3, r0, r3
 8000e2e:	d0d3      	beq.n	8000dd8 <_malloc_r+0x20>
 8000e30:	425a      	negs	r2, r3
 8000e32:	50e2      	str	r2, [r4, r3]
 8000e34:	e7d0      	b.n	8000dd8 <_malloc_r+0x20>
 8000e36:	428c      	cmp	r4, r1
 8000e38:	684b      	ldr	r3, [r1, #4]
 8000e3a:	bf16      	itet	ne
 8000e3c:	6063      	strne	r3, [r4, #4]
 8000e3e:	6013      	streq	r3, [r2, #0]
 8000e40:	460c      	movne	r4, r1
 8000e42:	e7eb      	b.n	8000e1c <_malloc_r+0x64>
 8000e44:	460c      	mov	r4, r1
 8000e46:	6849      	ldr	r1, [r1, #4]
 8000e48:	e7cc      	b.n	8000de4 <_malloc_r+0x2c>
 8000e4a:	1cc4      	adds	r4, r0, #3
 8000e4c:	f024 0403 	bic.w	r4, r4, #3
 8000e50:	42a0      	cmp	r0, r4
 8000e52:	d005      	beq.n	8000e60 <_malloc_r+0xa8>
 8000e54:	1a21      	subs	r1, r4, r0
 8000e56:	4630      	mov	r0, r6
 8000e58:	f000 f83e 	bl	8000ed8 <_sbrk_r>
 8000e5c:	3001      	adds	r0, #1
 8000e5e:	d0cf      	beq.n	8000e00 <_malloc_r+0x48>
 8000e60:	6025      	str	r5, [r4, #0]
 8000e62:	e7db      	b.n	8000e1c <_malloc_r+0x64>
 8000e64:	20000084 	.word	0x20000084
 8000e68:	20000088 	.word	0x20000088

08000e6c <_putc_r>:
 8000e6c:	b570      	push	{r4, r5, r6, lr}
 8000e6e:	460d      	mov	r5, r1
 8000e70:	4614      	mov	r4, r2
 8000e72:	4606      	mov	r6, r0
 8000e74:	b118      	cbz	r0, 8000e7e <_putc_r+0x12>
 8000e76:	6983      	ldr	r3, [r0, #24]
 8000e78:	b90b      	cbnz	r3, 8000e7e <_putc_r+0x12>
 8000e7a:	f7ff fe61 	bl	8000b40 <__sinit>
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_putc_r+0x60>)
 8000e80:	429c      	cmp	r4, r3
 8000e82:	d112      	bne.n	8000eaa <_putc_r+0x3e>
 8000e84:	6874      	ldr	r4, [r6, #4]
 8000e86:	68a3      	ldr	r3, [r4, #8]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	60a3      	str	r3, [r4, #8]
 8000e8e:	da16      	bge.n	8000ebe <_putc_r+0x52>
 8000e90:	69a2      	ldr	r2, [r4, #24]
 8000e92:	4293      	cmp	r3, r2
 8000e94:	db02      	blt.n	8000e9c <_putc_r+0x30>
 8000e96:	b2eb      	uxtb	r3, r5
 8000e98:	2b0a      	cmp	r3, #10
 8000e9a:	d110      	bne.n	8000ebe <_putc_r+0x52>
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000ea6:	f7ff bc9b 	b.w	80007e0 <__swbuf_r>
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <_putc_r+0x64>)
 8000eac:	429c      	cmp	r4, r3
 8000eae:	d101      	bne.n	8000eb4 <_putc_r+0x48>
 8000eb0:	68b4      	ldr	r4, [r6, #8]
 8000eb2:	e7e8      	b.n	8000e86 <_putc_r+0x1a>
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_putc_r+0x68>)
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	bf08      	it	eq
 8000eba:	68f4      	ldreq	r4, [r6, #12]
 8000ebc:	e7e3      	b.n	8000e86 <_putc_r+0x1a>
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	6022      	str	r2, [r4, #0]
 8000ec4:	701d      	strb	r5, [r3, #0]
 8000ec6:	b2e8      	uxtb	r0, r5
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
 8000eca:	bf00      	nop
 8000ecc:	080010cc 	.word	0x080010cc
 8000ed0:	080010ec 	.word	0x080010ec
 8000ed4:	080010ac 	.word	0x080010ac

08000ed8 <_sbrk_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4c06      	ldr	r4, [pc, #24]	; (8000ef4 <_sbrk_r+0x1c>)
 8000edc:	2300      	movs	r3, #0
 8000ede:	4605      	mov	r5, r0
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	f7ff fb72 	bl	80005cc <_sbrk>
 8000ee8:	1c43      	adds	r3, r0, #1
 8000eea:	d102      	bne.n	8000ef2 <_sbrk_r+0x1a>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	b103      	cbz	r3, 8000ef2 <_sbrk_r+0x1a>
 8000ef0:	602b      	str	r3, [r5, #0]
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	2000008c 	.word	0x2000008c

08000ef8 <__sread>:
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	460c      	mov	r4, r1
 8000efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f00:	f000 f896 	bl	8001030 <_read_r>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	bfab      	itete	ge
 8000f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f0c:	181b      	addge	r3, r3, r0
 8000f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f12:	bfac      	ite	ge
 8000f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f16:	81a3      	strhlt	r3, [r4, #12]
 8000f18:	bd10      	pop	{r4, pc}

08000f1a <__swrite>:
 8000f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f1e:	461f      	mov	r7, r3
 8000f20:	898b      	ldrh	r3, [r1, #12]
 8000f22:	05db      	lsls	r3, r3, #23
 8000f24:	4605      	mov	r5, r0
 8000f26:	460c      	mov	r4, r1
 8000f28:	4616      	mov	r6, r2
 8000f2a:	d505      	bpl.n	8000f38 <__swrite+0x1e>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f34:	f000 f868 	bl	8001008 <_lseek_r>
 8000f38:	89a3      	ldrh	r3, [r4, #12]
 8000f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f42:	81a3      	strh	r3, [r4, #12]
 8000f44:	4632      	mov	r2, r6
 8000f46:	463b      	mov	r3, r7
 8000f48:	4628      	mov	r0, r5
 8000f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	f000 b817 	b.w	8000f80 <_write_r>

08000f52 <__sseek>:
 8000f52:	b510      	push	{r4, lr}
 8000f54:	460c      	mov	r4, r1
 8000f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f5a:	f000 f855 	bl	8001008 <_lseek_r>
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	bf15      	itete	ne
 8000f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f6e:	81a3      	strheq	r3, [r4, #12]
 8000f70:	bf18      	it	ne
 8000f72:	81a3      	strhne	r3, [r4, #12]
 8000f74:	bd10      	pop	{r4, pc}

08000f76 <__sclose>:
 8000f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f7a:	f000 b813 	b.w	8000fa4 <_close_r>
	...

08000f80 <_write_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4c07      	ldr	r4, [pc, #28]	; (8000fa0 <_write_r+0x20>)
 8000f84:	4605      	mov	r5, r0
 8000f86:	4608      	mov	r0, r1
 8000f88:	4611      	mov	r1, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6022      	str	r2, [r4, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f7ff facf 	bl	8000532 <_write>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	d102      	bne.n	8000f9e <_write_r+0x1e>
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	b103      	cbz	r3, 8000f9e <_write_r+0x1e>
 8000f9c:	602b      	str	r3, [r5, #0]
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
 8000fa0:	2000008c 	.word	0x2000008c

08000fa4 <_close_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4c06      	ldr	r4, [pc, #24]	; (8000fc0 <_close_r+0x1c>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4605      	mov	r5, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	f7ff fadb 	bl	800056a <_close>
 8000fb4:	1c43      	adds	r3, r0, #1
 8000fb6:	d102      	bne.n	8000fbe <_close_r+0x1a>
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	b103      	cbz	r3, 8000fbe <_close_r+0x1a>
 8000fbc:	602b      	str	r3, [r5, #0]
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	2000008c 	.word	0x2000008c

08000fc4 <_fstat_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4c07      	ldr	r4, [pc, #28]	; (8000fe4 <_fstat_r+0x20>)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4608      	mov	r0, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	f7ff fad5 	bl	8000580 <_fstat>
 8000fd6:	1c43      	adds	r3, r0, #1
 8000fd8:	d102      	bne.n	8000fe0 <_fstat_r+0x1c>
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	b103      	cbz	r3, 8000fe0 <_fstat_r+0x1c>
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <_isatty_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4c06      	ldr	r4, [pc, #24]	; (8001004 <_isatty_r+0x1c>)
 8000fec:	2300      	movs	r3, #0
 8000fee:	4605      	mov	r5, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	f7ff fad3 	bl	800059e <_isatty>
 8000ff8:	1c43      	adds	r3, r0, #1
 8000ffa:	d102      	bne.n	8001002 <_isatty_r+0x1a>
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	b103      	cbz	r3, 8001002 <_isatty_r+0x1a>
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	2000008c 	.word	0x2000008c

08001008 <_lseek_r>:
 8001008:	b538      	push	{r3, r4, r5, lr}
 800100a:	4c07      	ldr	r4, [pc, #28]	; (8001028 <_lseek_r+0x20>)
 800100c:	4605      	mov	r5, r0
 800100e:	4608      	mov	r0, r1
 8001010:	4611      	mov	r1, r2
 8001012:	2200      	movs	r2, #0
 8001014:	6022      	str	r2, [r4, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	f7ff facb 	bl	80005b2 <_lseek>
 800101c:	1c43      	adds	r3, r0, #1
 800101e:	d102      	bne.n	8001026 <_lseek_r+0x1e>
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	b103      	cbz	r3, 8001026 <_lseek_r+0x1e>
 8001024:	602b      	str	r3, [r5, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	2000008c 	.word	0x2000008c

0800102c <__malloc_lock>:
 800102c:	4770      	bx	lr

0800102e <__malloc_unlock>:
 800102e:	4770      	bx	lr

08001030 <_read_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4c07      	ldr	r4, [pc, #28]	; (8001050 <_read_r+0x20>)
 8001034:	4605      	mov	r5, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4611      	mov	r1, r2
 800103a:	2200      	movs	r2, #0
 800103c:	6022      	str	r2, [r4, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	f7ff fa5a 	bl	80004f8 <_read>
 8001044:	1c43      	adds	r3, r0, #1
 8001046:	d102      	bne.n	800104e <_read_r+0x1e>
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	b103      	cbz	r3, 800104e <_read_r+0x1e>
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	2000008c 	.word	0x2000008c

08001054 <_init>:
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	bf00      	nop
 8001058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105a:	bc08      	pop	{r3}
 800105c:	469e      	mov	lr, r3
 800105e:	4770      	bx	lr

08001060 <_fini>:
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	bf00      	nop
 8001064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001066:	bc08      	pop	{r3}
 8001068:	469e      	mov	lr, r3
 800106a:	4770      	bx	lr
